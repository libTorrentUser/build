#!/bin/sh

. ../script/lib.sh



PackageBuildDependencies()
{
	printf '
cmake
make
';
}


PackageRuntimeDependencies()
{
	return 0;
}


PackageWarnings()
{
	return 0;	
}


PackageBuild_Brotli()
{
	local withPIC="$1";
	shift;

	local buildDir="$1";
	local prefix="$2";
	local destDir="$3";
	#local npp="$4";
	local dirBin="$5";
	local dirRoot="$6";
	
	local package='brotli';


	local sourceDir;
	sourceDir=$(./latest.sh \
		--host='github' \
		--package="google/${package}" \
		-b="$buildDir"
		);

	if [ $? -ne 0 ] || [ -z "$sourceDir" ]; then
		Die "unable to retrieve the latest version tarball";
	fi


	#apply all patches
	DieIfFails ./patch.sh "$package" "$sourceDir";

	# tell cmake to search for stuff in our "fake" sys root dir
	local packageSearchPath="${_dirRoot}/${prefix}";
	
	# build both shared and static libs
	DieIfFails mkdir -p "$destDir";
	
	for shared in True False; do
		local destDirTmp="$destDir-$shared";
	
		DieIfFails ./make.sh \
			-b="$buildDir" \
			-s="$sourceDir" \
			--cmd-configure='cmake' \
			--configure-options="\
				-D BUILD_SHARED_LIBS=$shared \
				-D BUILD_TESTING=OFF \
				-D CMAKE_BUILD_TYPE=Release \
				-D CMAKE_INSTALL_PREFIX=$prefix \
				-D CMAKE_POSITION_INDEPENDENT_CODE=$withPIC \
				-D CMAKE_PREFIX_PATH=$packageSearchPath \
				" \
			--dest-dir="$destDirTmp" \
			--install-options="install/strip";

			DieIfFails cp -rl "$destDirTmp/". "$destDir/";
			DieIfFails rm -rf "$destDirTmp";
	done

	local pkgconfigDir="$dirBin/pkgconfig";
		
	DieIfFails ./adjust-pkgconfig.sh \
		-d="$destDir" \
		--prefix="$prefix" \
		-o="$pkgconfigDir" \
		-r="$dirRoot";
}


PackageBuild()
{
	PackageBuild_Brotli 'OFF' "$@";
}
