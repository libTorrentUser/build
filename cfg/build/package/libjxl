#!/bin/sh

# this package will build only libjxl and its tools while using the latest
# version of each dependent packge. You can use the package libjxl-bundled to
# build using the exact versions that were used when a libjxl release was 
# created

. ../script/lib.sh


PackageBuildDependencies()
{
	printf '
brotli-pic
cmake
giflib
highway
make
libjpeg-turbo
libpng
libwebp
zlib
';
}


PackageRuntimeDependencies()
{
	return 0;
}


PackageWarnings()
{
	return 0;
}


PackageBuild()
{
	local buildDir="$1";
	local prefix="$2";
	local destDir="$3";
	#local npp="$4";
	local dirBin="$5";
	local dirRoot="$6";
	local dirRoot="$6";
	
	local package='libjxl';

	local sourceDir;
	sourceDir=$(./latest.sh \
		--package="${package}/${package}" \
		--host='github' \
		--github-regex='tarball_url.*' \
		-b="$buildDir"
		);


	Log 'Downloading dependencies'
	# instead of running the deps.sh script, get only dependencies 
	# we will relly need. We could download the latest release from those and
	# extract them at the dir libjxl wants, but I'm afraid there might be some
	# sort of incompatibility, so I'll use the recommended commit
	local depHash;
	depHash=$(sed -n 's;THIRD_PARTY_SKCMS="\([^"]*\)";\1;p' "$sourceDir/deps.sh");
	if [ $? -ne 0 ] || [ -z "$depHash" ]; then
		Die 'unable to retrieve dependency commit hash';
	fi

	local depTarDownloadDir="$buildDir/tmp";
	local depTarName='skcms.tar.gz';
	DieIfFails Download \
		"https://skia.googlesource.com/skcms/+archive/${depHash}.tar.gz" \
		"$depTarDownloadDir" \
		"$depTarName";

	local depSourceDir="${sourceDir}/third_party/skcms";
	DieIfFails mkdir -p "$depSourceDir";

	local depTarPath="${depTarDownloadDir}/${depTarName}";
	DieIfFails tar -C "$depSourceDir" -xf "$depTarPath";
	DieIfFails rm "$depTarPath";


	#apply all patches
	DieIfFails ./patch.sh "$package" "$sourceDir";


	# CMAKE will only find packages installed in non-standard locations if we pass
	# where they are in CMAKE_PREFIX_PATH. But there is a catch, it expects the
	# paths to be the directory containing the /bin /lib etc subdirs. If the stuff
	# is under a prefix like, for instance, /usr, as in /usr/bin or /usr/lib, then 
	# you must append the /usr prefix to the paths
	#packageSearchPath=;
	#if [ $(CountItems "${destDir}/") -gt 0 ]; then
	#	for d in "${destDir}/"*; do
	#		packageSearchPath="${packageSearchPath}${packageSearchPath:+:}${d}/usr"
	#	done
	#fi

	# instead of all that complication we can (now) simply use our "fake" sys
	# root dir
	local packageSearchPath="${_dirRoot}/${prefix}";
	
	# JPEGXL_STATIC
	# Build tools as static binaries.
	DieIfFails ./make.sh \
		-b="$buildDir" \
		-s="$sourceDir" \
		--cmd-configure='cmake' \
		--configure-options="\
			-D BUILD_SHARED_LIBS=OFF \
			-D BUILD_TESTING=OFF \
			-D CMAKE_BUILD_TYPE=Release \
			-D CMAKE_INSTALL_PREFIX=$prefix \
			-D CMAKE_PREFIX_PATH=$packageSearchPath \
			-D JPEGXL_ENABLE_BENCHMARK=OFF \
			-D JPEGXL_ENABLE_COVERAGE=OFF \
			-D JPEGXL_ENABLE_DOXYGEN=OFF \
			-D JPEGXL_ENABLE_EXAMPLES=OFF \
			-D JPEGXL_ENABLE_MANPAGES=OFF \
			-D JPEGXL_ENABLE_PROFILER=OFF \
			-D JPEGXL_ENABLE_SJPEG=OFF \
			-D JPEGXL_ENABLE_PLUGINS=ON \
			-D JPEGXL_ENABLE_PLUGIN_GIMP210=OFF \
			-D JPEGXL_ENABLE_VIEWERS=OFF \
			-D JPEGXL_FORCE_SYSTEM_BROTLI=ON \
			-D JPEGXL_FORCE_SYSTEM_HWY=ON \
			-D JPEGXL_STATIC=ON \
			-D JPEGXL_TEST_TOOLS=OFF \
			" \
		--dest-dir="$destDir" \
		--install-options="install/strip";
				

	local pkgconfigDir="$dirBin/pkgconfig";

	DieIfFails ./adjust-pkgconfig.sh \
		-d="$destDir" \
		--prefix="$prefix" \
		-o="$pkgconfigDir" \
		-r="$dirRoot";

}
