#!/bin/sh

# it seems this has finaly became part of POSIX (2022)
set -o pipefail


source script.lib.sh



PackageBuildDependencies()
{
# for java, it worked when I installed openjdk11 in Alpine. It seems v11 is the
# latest one they currently support
	printf '	
bash
java
linux-headers
unzip
zip';
}


PackageRuntimeDependencies()
{
	return 0;
}


PackageWarnings()
{
	return 0;
}


PackageBuild()
{
	local buildDir="$1";
	local prefix="$2";
	local destDir="$3";
	#local npp="$4";
	local dirBin="$5";
	
	local package='bazel';

	local sourceDir;
	sourceDir=$(./latest.sh \
		--package="bazelbuild/${package}" \
		--host='github' \
		--github-regex='browser_download_url.*-dist.zip"' \
		-b="$buildDir"
		);

	if [ $? -ne 0  ] || [ -z "$sourceDir" ]; then
		Die "unable to retrieve the latest sources";
	fi


	Log 'Patching hardcoded bash paths...'
	# replace the hardcoded /usr/bin/bash shebangs by '/usr/bin/env bash'
	# so the system can locate bash when it is not inside /usr/bin (which will
	# be our case here if you let this build system build bash for you)
	#
	# we cannot use "find -exec" because it will ignore errors. Apparently
	# because POSIX says so. Because of that, we use xargs instead
	local envPath=;
	envPath="$(command -v env)";
	if [ $? -ne 0 ] || [ -z "$envPath" ] ; then
		Die 'command "env" not found';
	fi

	# replace any occurence of the harcoded shebang "#!/.*/bash" by 
	# "#!/bin/env bash" (assuming env is in "/bin". $envPath will have the path)
	find "$sourceDir" -type f -print0 | \
		xargs -0 -n 1 -I {} \
			sed -i "1 s;#!/bin/bash;#!${envPath} bash;" "{}";

	# this will only work correctly if "set -o pipefail" was called inside this
	# script. Only when pipefail is enabled we are able to retrieve the piped
	# command's exit status. 
	if [ $? -ne 0 ]; then
		Die 'patching of hardcoded bash shbang paths failed';
	fi

	# replace any occurence of the harcoded bash path"/bin/bash" by 
	# "bash", so whatever is calling bash can find it as long as it is in PATH
	find "$sourceDir" -type f -print0 | \
		xargs -0 -n 1 -I {} \
			sed -i "s;/bin/bash;bash;" "{}";

	# as I said before, this will only work correctly if "set -o pipefail" 
	# was called inside this script.
	if [ $? -ne 0 ]; then
		Die 'patching of hardcoded bash paths failed';
	fi
	
	Log 'Building bazel to build bazel...'

	# note, this EXTRA_BAZEL_ARGS thing is explicetly done in the official docs.
	# Not really sure what "--tool_java_runtime_version=local_jdk" does, but I 
	# tried to build without it and get errors. Errors late. Very f.... late
	# in the build process. Feel free to try
	#
	# The "--host_action_env=CPATH" is the only thing I added. It seems to be
	# the only way to make bazel use the CPATH env variable. It also nees our
	# modified PATH, but PATH is uses by default. I think. compile.sh passes
	# it as --action_env=PATH. Confusingly enough, CPATH cannot be passed like
	# that. It can, but it will be ignored. You have to use host_action_env for
	# CPATH. Why PATH is different, I don't know. Maybe PATH really is read by
	# default and that --action_env=PATH is passing it to something else...
	#
	# --host_copt is used to pass aditional compilation flags. Here we use it
	# to disable the "parenthesis" warning because some of those will be issued
	# when the compiler sees some crazy stuff inside musl libc endian.h header 
	local workDir="$buildDir/work";
	if [ -e "$workDir" ]; then
		DieIfFails DeleteAllFiles "$workDir";
	fi

	# log the current env cars
	printf '\n%s\n\n' "$(printenv | sort)";

	DieIfFails cd "$sourceDir";

	BAZEL_WRKDIR="$workDir" \
		EXTRA_BAZEL_ARGS="--tool_java_runtime_version=local_jdk \
			--host_action_env=CPATH \
			--host_copt=-Wno-error=parentheses \
			" \
		DieIfFails bash './compile.sh';
		
	DieIfFails cd -;

	Log 'Manually installing...';
	local finalDir="${destDir}/${prefix}";
	local finalDirBin="${finalDir}/bin";
	DieIfFail mkdir -p "${finalDirBin}";
	DieIfFails DeleteAllFiles "${finalDir}";
	DieIfFails cp "$sourceDir/output/bazel"	"$finalDirBin";
}
