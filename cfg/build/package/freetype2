#!/bin/sh

. ../script/lib.sh



PackageBuildDependencies()
{
	printf '
make
';
}


PackageRuntimeDependencies()
{
	return 0;
}


PackageWarnings()
{
	printf 'the file freetype2.pc is not using the {prefix} var in its paths. Because of that, I patch it after the build. The problem was detected on freetype-2.13.0';
}


PackageBuild()
{
	local buildDir="$1";
	local prefix="$2";
	local destDir="$3";
	#local npp="$4";
	local dirBin="$5";
	local dirRoot="$6";
	local dirRoot="$6";
	
	local package='freetype-2';

	local sourceDir;
	sourceDir=$(./latest.sh \
		--package="$package" \
		--url='https://download-mirror.savannah.gnu.org/releases/freetype' \
		-b="$buildDir"
		);
	
	DieIfFails ./make.sh \
		-b="$buildDir" \
		-s="$sourceDir" \
		--configure-options="\
			--prefix=$prefix \
		" \
		--dest-dir="$destDir"

	LogErr 'patching freetype2.pc hardcoded paths...'
	local pcFile="$destDir/$prefix/lib/pkgconfig/freetype2.pc";
	for v in exec_prefix libdir includedir; do
		# replace the hardcoded prefix in these vars by the ${prefix} var
		DieIfFails sed -i 's;^'${v}'='${prefix}';'${v}'=${prefix};' "$pcFile";
	done

	local pkgconfigDir="$dirBin/pkgconfig";

	DieIfFails ./adjust-pkgconfig.sh \
		-d="$destDir" \
		--prefix="$prefix" \
		-o="$pkgconfigDir" \
		-r="$dirRoot";	

	# although I painfuly made things work with this awesome script, nothing
	# should need these libtool .la files.  Anything an user could do with them
	# he can be done (better) with pkg-config
	#
	# DieIfFails ./adjust-libtool.sh \
	#	-d="$destDir" \
	#	--prefix="$prefix" \
	#	-o="${dirBin}/lib";
	DieIfFails ./adjust-libtool.sh \
		-d="$dirRoot" \
		--delete;
}
