#!/bin/sh

source script.lib.sh



PackageBuildDependencies()
{
	printf '
automake
libtool
make
';
}


PackageRuntimeDependencies()
{
	return 0;
}


PackageWarnings()
{
	return 0;	
}


PackageBuild()
{
	local buildDir="$1";
	local prefix="$2";
	local destDir="$3";
	#local npp="$4";
	local dirBin="$5";

	
	local package='musl-fts';

	local sourceDir;
	sourceDir=$(./latest.sh \
		--host='github-tag' \
		--package="void-linux/${package}" \
		-b="$buildDir"
		);

	if [ $? -ne 0  ] || [ -z "$sourceDir" ]; then
		Die "unable to retrieve the latest version tar";
	fi
	

	# this is one of those projects that you must first generate the configure
	# script. And you must run the stupid bootstrap.sh script from the source
	# dir. That is why we use a subshell here - so we do not have to worry
	# about returning to the dir we were
	$(
		DieIfFails cd "$sourceDir";
		DieIfFails "./bootstrap.sh";
	)
	
	
	DieIfFails ./make.sh \
		-b="$buildDir" \
		-s="$sourceDir" \
		--configure-options="\
			--prefix=$prefix \
		" \
		--dest-dir="$destDir" \
		--install-options="install-strip";	
}
